#!/usr/bin/env bash
currentdir=$(pwd)
export RACKSPACE_FOLDER=${RACKSPACE_FOLDER:=$currentdir}
export RACKSPACE_USERNAME=${RACKSPACE_USERNAME:=""}
export RACKSPACE_APIKEY=${RACKSPACE_APIKEY:=""}
export RACKSPACE_CONTAINER=${RACKSPACE_CONTAINER:=""}

export RACKSPACE_TOKEN=""
export RACKSPACE_URL=""

#
#
# AUTH SECTION
#
#

# hit rackspace with our username and apikey
# it will return the auth packet with token and endpoints
# we use JSON.sh to parse the return data
function get_auth_packet() {
	curl -s -d \
	'{
	    "auth":
	    {
	       "RAX-KSKEY:apiKeyCredentials":
	       {  
	          "username": "'$RACKSPACE_USERNAME'",  
	          "apiKey": "'$RACKSPACE_APIKEY'"}
	    }  
	}' \
	-H 'Content-Type: application/json' \
	'https://identity.api.rackspacecloud.com/v2.0/tokens'
}

# extract the token from the auth data
function get_access_token() {
	cat | JSON.sh | egrep '\["access","token","id"*\]' | awk '{print $2}' | sed 's/"//g'
}

# extract the files endpoint from the auth data
function get_files_endpoint() {
	cat | JSON.sh | egrep '\["access","serviceCatalog",1,"endpoints",0,"publicURL"*\]' | awk '{print $2}' | sed 's/\\\//\//g' | sed 's/"//g'
}

#
#
# UPLOAD SECTION
#
#

#Downloads a file from a container
function f_get () {
    CURL_TEST="curl -s -I -H"
    CURL_GET="curl --progress-bar -O -H"
      RESPONSE=$(${CURL_TEST} "X-Auth-Token: ${STORAGETOKEN}" $STORAGEURL/${OBJECT}/${FILE})| head -1 |awk '{print $2}'
      if `echo ${RESPONSE} |grep -q 404`; then
        echo "${FILE} was not found in ${OBJECT} container."
      else
        PWD=`pwd`
        ${CURL_GET} "X-Auth-Token: ${STORAGETOKEN}" $STORAGEURL/${OBJECT}/${FILE}
        echo "${FILE} downloaded to ${PWD}/${FILE}."
      fi
}

# local file -> rackspace url
function file_url() {
	file=$1
	echo "$RACKSPACE_URL/$RACKSPACE_CONTAINER$file"
}

# rackspace url -> HTTP status code
function get_remote_status() {
	url="$1"
	curl -s -I -H "X-Auth-Token: $RACKSPACE_TOKEN" $url | grep HTTP/1.1 | awk {'print $2'}
}

function upload_file() {
	file="$1"
	localpath="$RACKSPACE_FOLDER$file"
	url=$(file_url "$file")
	curl -X PUT -T $localpath -H "X-Auth-Token: $RACKSPACE_TOKEN" $url
}


#
#
# CONTROLLER SECTION
#
#


function login() {
	echo "fetching login details from rackspace:"
	auth_packet=$(get_auth_packet)
	access_token=$(echo "$auth_packet" | get_access_token)
	files_endpoint=$(echo "$auth_packet" | get_files_endpoint)
	export RACKSPACE_TOKEN=$access_token
	export RACKSPACE_URL=$files_endpoint
}


function uploader() {
	for file in `find $RACKSPACE_FOLDER -type f -name '*'`; do
		localpath=${file#"$RACKSPACE_FOLDER"}
		remoteurl=$(file_url "$localpath")
		status=$(get_remote_status "$remoteurl")
		if [[ "$status" == "401" ]]; then
			echo "ERROR: token not valid"
			exit 1
		fi

		if [[ "$status" != "200" ]]; then
			echo "uploading $localpath"
			#upload_file $localpath
			echo "$localpath done"
		else
			echo "$localpath uploaded already"
		fi
	done
}


function show_help() {
	cat <<EOF

Usage: $0 [options]

-h | --help                             show this help text
                     
-f | --folder    | RACKSPACE_FOLDER     path to a local folder to upload
-u | --username  | RACKSPACE_USERNAME   the rackspace username
-a | --apikey    | RACKSPACE_APIKEY     the rackspace apikey
-c | --container | RACKSPACE_CONTAINER  the rackspace container

EOF
}

for i in "$@"
do
case $i in
		-f=*|--folder=*)
    export RACKSPACE_FOLDER="${i#*=}"
    ;;
    -u=*|--username=*)
    export RACKSPACE_USERNAME="${i#*=}"
    ;;
    -a=*|--apikey=*)
    export RACKSPACE_APIKEY="${i#*=}"
    ;;
    -c=*|--container=*)
    export RACKSPACE_CONTAINER="${i#*=}"
    ;;
    -h|--help)
    show_help
    exit
    ;;
    *)
			# unknown option
    ;;
esac
done

if [[ -z $RACKSPACE_FOLDER ]]; then
	echo "RACKSPACE_FOLDER | -f | --folder needed"
	exit 1
fi

if [[ -z $RACKSPACE_USERNAME ]]; then
	echo "RACKSPACE_USERNAME | -u | --username needed"
	exit 1
fi

if [[ -z $RACKSPACE_APIKEY ]]; then
	echo "RACKSPACE_APIKEY | -a | --apikey needed"
	exit 1
fi

if [[ -z $RACKSPACE_CONTAINER ]]; then
	echo "RACKSPACE_CONTAINER | -c | --container needed"
	exit 1
fi

if [[ ! -d $RACKSPACE_FOLDER ]]; then
	echo "the folder: $RACKSPACE_FOLDER does not exist"
	exit 1
fi

login

echo
echo "token: $RACKSPACE_TOKEN"
echo "url: $RACKSPACE_URL"
echo
echo "uploading: $RACKSPACE_FOLDER"

uploader